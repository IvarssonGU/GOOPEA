use crate::lexer::{Token, LexicalError};
use crate::ast::{base::*, ast::*};

grammar;

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token {
        "noncap_id" => Token::NonCapitalIdentifier(<String>),
        "cap_id" => Token::CapitalIdentifier(<String>),
        "int" => Token::Integer(<i64>),
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        ":" => Token::Colon,
        "," => Token::Comma,
        "=" => Token::Equal,
        "_" => Token::Wildcard,
        "fip" => Token::Fip,
        "match" => Token::Match,
        "enum" => Token::Enum,
        "let" => Token::Let,
        "in" => Token::In,
        "+-" => Token::PlusMinus(<String>),
        "*/" => Token::MultiplyDivide(<String>),
        "cmp" => Token::Comparator(<String>),
        ";" => Token::EOL
    }
}

pub Program: Vec<Definition> = { Definition* }

#[inline]
OptionalImplicitUTuple<T>: UTuple<T> = {
    ImplicitUTuple<T>? => {
        <>.unwrap_or_else(|| UTuple(vec![]))
    }
}

#[inline]
ImplicitUTuple<T>: UTuple<T> = {
    T => UTuple(vec![<>]),
    UTuple<T> => <>
}

#[inline]
UTuple<T>: UTuple<T> = {
    "(" <mut others: (<T> ",")*> <last: T?> ")" => {
        if let Some(last) = last { others.push(last); }
        UTuple(others)
    }
}

Definition: Definition = {
    "enum" <id: "cap_id"> "=" <first: Constructor> <rest: ("," <Constructor>)*> ";" => {
        let mut constructors = vec![first];
        constructors.extend(rest.into_iter());
        Definition::ADT(id, constructors)
    },

    <signature: FunctionSignature> <id: "cap_id"> <vars: OptionalImplicitUTuple<"noncap_id">> "=" <body: Expression> ";" => {
        Definition::Function(id, Function { signature, vars, body })
    }
}

Constructor: (FID, UTuple<Type>) = {
    <fid: "cap_id"> <args: OptionalImplicitUTuple<Type>> => (fid, args)
}

Type: Type = {
    "cap_id" => {
        if <> == "Int" { Type::Int }
        else { Type::ADT(<>) }
    },
}

#[inline]
FunctionSignature: FunctionSignature = {
    <fip: "fip"?> <argument_type: ImplicitUTuple<Type>> ":" <result_type: ImplicitUTuple<Type>> => {
        FunctionSignature { is_fip: fip.is_some(), argument_type, result_type }
    }
}

ExpressionReset = <Expression>;
Expression: BaseNode = {
    #[precedence(level="0")]
    "noncap_id" => BaseNode::variable(<>),
    "cap_id" => BaseNode::function_call(<>, UTuple(vec![])),
    "int" => BaseNode::integer(<>),
    <mut tup: UTuple<ExpressionReset>> => {
        if tup.0.len() == 1 {
            tup.0.pop().unwrap()
        } else {
            BaseNode::utuple(tup)
        }
    },


    #[precedence(level="1")]
    <id: "cap_id"> <arg: Expression> => {
        match arg.expr {
            Expression::UTuple(args) => {
                BaseNode::function_call(id, args)
            },
            _ => BaseNode::function_call(id, UTuple(vec![arg]))
        }
    },

    #[precedence(level="2")]
    <op: "+-"> <e: Expression> => {
        if op == "+" {
            e
        } else {
            BaseNode::operation(op, BaseNode::integer(0), e)
        }
    },

    #[precedence(level="3")] #[assoc(side="left")]
    <e1: Expression> <op: "*/"> <e2: Expression> => BaseNode::operation(op, e1, e2),

    #[precedence(level="4")] #[assoc(side="left")]
    <e1: Expression> <op: "+-"> <e2: Expression> => BaseNode::operation(op, e1, e2),

    /*#[precedence(level="5")] #[assoc(side="left")]
    <e1: Expression> <op: "cmp"> <e2: Expression> => {
        let operation = match op.as_str() {
            "==" => Operator::Equal,
            "!=" => Operator::NotEqual,
            "<" => Operator::Less,
            "<=" => Operator::LessOrEqual,
            ">" => Operator::Greater,
            ">=" => Operator::GreaterOrEqual,
            _ => panic!("???")
        };

        Expression::Operation(operation, Box::new(e1), Box::new(e2))
    },*/

    #[precedence(level="6")]
    "match" <expr: Expression> "{" <cases: MatchCases> "}" => {
        BaseNode::mtch(expr, cases)
    },

    "let" <vars: ImplicitUTuple<"noncap_id">> "=" <e1: Expression> "in" <e2: Expression> => {
        BaseNode::mtch(e1, vec![(Pattern::UTuple(vars), e2)])
    }
}

#[inline]
MatchCases: Vec<(Pattern, BaseNode)> = {
    <first: MatchCase> <rest: ("," <MatchCase>)*> => {
        let mut cases = vec![first];
        cases.extend(rest);
        cases
    }
}

#[inline]
WildcardableVar: String = {
    "noncap_id",
    "_" => "_".to_string()
}

#[inline]
Pattern: Pattern = {
    <cons_id: "cap_id"> <vars: OptionalImplicitUTuple<WildcardableVar>> => Pattern::Constructor(cons_id, vars),
    "int" => Pattern::Integer(<>),
    ImplicitUTuple<WildcardableVar> => Pattern::UTuple(<>)
}

#[inline]
MatchCase: (Pattern, BaseNode) = {
    <pattern: Pattern> ":" <body: Expression> => (pattern, body)
}