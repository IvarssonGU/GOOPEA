use crate::lexer::{Token, LexicalError};
use crate::ast::{base::*, ast::*};
use std::ops::Range;

grammar;

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token {
        "noncap_id" => Token::NonCapitalIdentifier(<String>),
        "cap_id" => Token::CapitalIdentifier(<String>),
        "int" => Token::Integer(<i64>),
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        ":" => Token::Colon,
        "," => Token::Comma,
        "=" => Token::Equal,
        "_" => Token::Wildcard,
        "fip" => Token::Fip,
        "match" => Token::Match,
        "enum" => Token::Enum,
        "let" => Token::Let,
        "in" => Token::In,
        "+-" => Token::PlusMinus(<String>),
        "%" => Token::Modulo,
        "*/" => Token::MultiplyDivide(<String>),
        "cmp" => Token::Comparator(<String>),
        ";" => Token::EOL
    }
}

pub Program: Vec<Definition> = { Definition* }

#[inline]
OptionalImplicitUTuple<T>: UTuple<T> = {
    ImplicitUTuple<T>? => {
        <>.unwrap_or_else(|| UTuple(vec![]))
    }
}

#[inline]
ImplicitUTuple<T>: UTuple<T> = {
    T => UTuple(vec![<>]),
    UTuple<T> => <>
}

#[inline]
UTuple<T>: UTuple<T> = {
    "(" <mut others: (<T> ",")*> <last: T?> ")" => {
        if let Some(last) = last { others.push(last); }
        UTuple(others)
    }
}

Definition: Definition = {
    "enum" <id: "cap_id"> "=" <first: Constructor> <rest: ("," <Constructor>)*> ";" => {
        let mut constructors = vec![first];
        constructors.extend(rest.into_iter());
        Definition::ADT(id, constructors)
    },

    <signature: FunctionSignature> <id: "noncap_id"> <vars: OptionalImplicitUTuple<"noncap_id">> "=" <body: Expression> ";" => {
        Definition::Function(id, (FunctionData { signature, vars }, body))
    }
}

Constructor: (FID, UTuple<Type>) = {
    <fid: "cap_id"> <args: OptionalImplicitUTuple<Type>> => (fid, args)
}

Type: Type = {
    "cap_id" => {
        if <> == "Int" { Type::Int }
        else { Type::ADT(<>) }
    },
}

#[inline]
FunctionSignature: FunctionSignature = {
    <fip: "fip"?> <argument_type: ImplicitUTuple<Type>> ":" <result_type: ImplicitUTuple<Type>> => {
        FunctionSignature { is_fip: fip.is_some(), argument_type, result_type }
    }
}

#[inline]
CallableID: String = {
    "cap_id", "noncap_id"
}

ExpressionReset = <Expression>;
Expression: BaseRangeNode = {
    #[precedence(level="0")]
    <l: @L> <id: "cap_id"> <r: @R> => BaseRangeNode::function_call(id, UTuple(vec![]), l..r),
    <l: @L> <id: "noncap_id"> <r: @R> => BaseRangeNode::variable(id, l..r),
    <l: @L> <x: "int"> <r: @R> => BaseRangeNode::integer(x, l..r),
    <l: @L> <mut tup: UTuple<ExpressionReset>> <r: @R> => {
        if tup.0.len() == 1 {
            tup.0.pop().unwrap()
        } else {
            BaseRangeNode::utuple(tup, l..r)
        }
    },


    #[precedence(level="1")]
    <l: @L> <id: CallableID> <arg: Expression> <r: @R> => {
        match arg.expr {
            SyntaxExpression::UTuple(args) => {
                BaseRangeNode::function_call(id, args, l..r)
            },
            _ => BaseRangeNode::function_call(id, UTuple(vec![arg]), l..r)
        }
    },

    #[precedence(level="2")]
    <l: @L> <op: "+-"> <e: Expression> <r: @R> => {
        if op == "+" {
            e
        } else {
            BaseRangeNode::operation(op.as_str().try_into().unwrap(), BaseRangeNode::integer(0, l..r), e, l..r)
        }
    },

    #[precedence(level="3")] #[assoc(side="left")]
    <l: @L> <e1: Expression> <op: "*/"> <e2: Expression> <r: @R> => BaseRangeNode::operation(op.as_str().try_into().unwrap(), e1, e2, l..r),

    #[precedence(level="4")] #[assoc(side="left")]
    <l: @L> <e1: Expression> <op: "+-"> <e2: Expression> <r: @R> => BaseRangeNode::operation(op.as_str().try_into().unwrap(), e1, e2, l..r),

    #[precedence(level="4")] #[assoc(side="left")]
    <l: @L> <e1: Expression> <op: "%"> <e2: Expression> <r: @R> => BaseRangeNode::operation(Operator::Mod, e1, e2, l..r),

    #[precedence(level="5")] #[assoc(side="left")]
    <l: @L> <e1: Expression> <op: "cmp"> <e2: Expression> <r: @R> => BaseRangeNode::operation(op.as_str().try_into().unwrap(), e1, e2, l..r),

    #[precedence(level="6")]
    <l: @L> "match" <expr: Expression> "{" <cases: MatchCases> "}" <r: @R> => {
        BaseRangeNode::mtch(expr, cases, l..r)
    },

    <l: @L> "let" <vars: ImplicitUTuple<WildcardableVar>> "=" <e1: Expression> "in" <e2: Expression> <r: @R> => {
        BaseRangeNode::let_equal_in(vars, e1, e2, l..r)
    }
}

#[inline]
MatchCases: Vec<(Pattern, BaseRangeNode)> = {
    <first: MatchCase> <rest: ("," <MatchCase>)*> => {
        let mut cases = vec![first];
        cases.extend(rest);
        cases
    }
}

#[inline]
WildcardableVar: String = {
    "noncap_id",
    "_" => "_".to_string()
}

#[inline]
Pattern: Pattern = {
    <cons_id: "cap_id"> <vars: OptionalImplicitUTuple<WildcardableVar>> => Pattern::Constructor(cons_id, vars),
    "int" => Pattern::Integer(<>),
    "noncap_id" => Pattern::Variable(<>)
}

#[inline]
MatchCase: (Pattern, BaseRangeNode) = {
    <vars: Pattern> ":" <body: Expression> => (vars, body)
}