enum Poly = Nil, Cons(Int, Poly);

(Int, Int, Poly): Int
evalHelper(x, xf, p) = match p {
    Nil: 0,
    Cons(n, ns): xf * n + evalHelper(x, x * xf, ns)
};

(Int, Poly): Int
eval(x, p) = evalHelper(x, 1, p);

fip (Poly, Poly): Poly
add(left, right) = match left {
    Nil: right,
    Cons(x, xs): match right {
        Nil: left,
        Cons(y, ys): Cons(x + y, add(xs, ys))
    }
};

fip Poly: Poly
negate p = match p {
    Nil: Nil,
    Cons(x, xs): Cons(-x, negate xs)
};

fip (Poly, Poly): Poly
subtract(left, right) = let right' = negate right in add(left, right');

(Int, Poly): Poly
scalarMul(n, p) = match p {
    Nil: Nil,
    Cons(x, xs): Cons(n * x, scalarMul(n, xs))
};

(): Int // 1*1 + 2*(5) + 3*(5^2) = 1 + 10 + 75 = 86 
main = let p = Cons(1, Cons(2, Cons(3, Nil))) in eval(5, p);