#ifnot LIST_LIB
#def LIST_LIB

#include rand.goo

enum List = Nil, Cons(Int, List);

fip (List, List): List
reverseHelper(list, acc) = match list {
    Nil: acc,
    Cons(x, xs): reverseHelper(xs, Cons(x, acc))
};

fip List: List
reverseList list = reverseHelper(list, Nil);

List: Int
sumList list = match list {
    Nil: 0,
    Cons(x, xs): x + sumList xs
};

List: Int
lenList list = match list {
    Nil: 0,
    Cons(x, xs): 1 + lenList xs
};

fip (List, Int): List
appendList(list, a) = match list {
    Nil: Cons(a, Nil),
    Cons(x, xs): Cons(x, appendList(xs, a))
};

fip (List, List): List
concatList(list1, list2) = match list1 {
    Nil: list2,
    Cons(x, xs): Cons(x, concatList(xs, list2))
};

(Int, Int): List
rangeListp(start, stop) = match start <= stop {
    True: Cons(start, rangeListp((start + 1), stop)),
    False: Nil
};

(Int, Int): List
rangeListn(start, stop) = match start >= stop {
    True: Cons(start, rangeListn((start - 1), stop)),
    False: Nil
};

(Int, Int): List
rangeList(start, stop) = match start <= stop {
    True: rangeListp(start, stop),
    False: rangeListn(start, stop)
};

(Int, Int, Int): List
randList(seed, len, mod) = match len > 0 {
    True: let a = next seed in 
        Cons((a % mod + mod) % mod, randList(a, len - 1, mod)),
    False: Nil
};

#endif LIST_LIB