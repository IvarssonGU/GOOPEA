enum Tree = Empty, Node(Tree, Int, Tree);

(): Tree
build =
    Node(
        Node(
            Node(
                Empty,
                15,
                Empty
            ),
            10,
            Node(
                Empty,
                52,
                Empty
            )
        ),
        5,
        Node(
            Node(
                Empty,
                69,
                Node(
                    Node(
                        Empty,
                        7,
                        Empty
                    ),
                    100,
                    Node(
                        Empty,
                        4,
                        Empty
                    )
                ),
            ),
            23,
            Empty
        )
    );

Tree: Int
sum tree = match tree {
    Empty: 0,
    Node(left, value, right): sum(left) + value + sum(right)
};

(Tree, Tree): Tree
 

combine (a, b) = match a {
    Empty: match b {
        Empty: Empty,
        Node(left, value, right): Node(left, value, right)
    },
    Node(left, value, right): match b {
        Empty: Node(left, value, right),
        Node(left2, value2, right2): Node(combine(left, left2), value + value2, combine(right, right2))
    }
};

Tree: Tree
flip tree = match tree {
    Empty: Empty,
    Node(left, value, right): Node(flip(right), value, flip(left))
};

(): Int
main = sum(flip(combine(flip(build()), build())));
// main = sum(build());
