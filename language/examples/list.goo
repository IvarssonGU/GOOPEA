#ifnot LIST_LIB
#def LIST_LIB

enum List = Nil, Cons(List, Int);

(List, List): List
reverseHelper(list, acc) =
    match list {
        Nil: acc,
        Cons(xs, x): reverseHelper(xs, Cons(acc, x))
    };

List: List
reverseList list = reverseHelper(list, Nil);

List: Int
sumList list = match list {
    Nil: 0,
    Cons(xs, x): x + sumList xs
};

List: Int
lenList list = match list {
    Nil: 0,
    Cons(xs, x): 1 + lenList xs
};

(List, List): List
concatList(list1, list2) = match list1 {
    Nil: list2,
    Cons(xs, x): Cons(concatList(xs, list2), x)
};

(Int, Int): List
rangeListp(start, stop) = match start <= stop {
    True: Cons(rangeListp((start + 1), stop), start),
    False: Nil
};

(Int, Int): List
rangeListn(start, stop) = match start >= stop {
    True: Cons(rangeListn((start - 1), stop), start),
    False: Nil
};

(Int, Int): List
rangeList(start, stop) = match start <= stop {
    True: rangeListp(start, stop),
    False: rangeListn(start, stop)
};

#endif LIST_LIB